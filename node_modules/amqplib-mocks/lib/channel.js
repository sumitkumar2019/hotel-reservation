"use strict";

let routeMessages = (() => {
	var _ref = _asyncToGenerator(function* (consumers, message) {
		yield Promise.all(_.map(consumers, (() => {
			var _ref2 = _asyncToGenerator(function* (handler) {
				return handler(message);
			});

			return function (_x3) {
				return _ref2.apply(this, arguments);
			};
		})()));
		return true;
	});

	return function routeMessages(_x, _x2) {
		return _ref.apply(this, arguments);
	};
})();

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

/* eslint-disable max-lines */
const _ = require("lodash");
const shortid = require("shortid");
const sinon = require("sinon");

function setIfUndefined(object, prop, value) {
	if (!object[prop]) {
		object[prop] = value;
	}
}

function findHandlers(connection, exchange, routingKey) {
	if (!exchange) {
		return {};
	}

	const filtered = _.filter(exchange.bindings, binding => binding.regex.test(routingKey));
	return _.transform(filtered, (result, binding) => {
		if (binding.queueName) {
			const queue = connection.queues[binding.queueName];
			return Object.assign(result, queue.consumers || {});
		}
		if (binding.exchangeName) {
			const boundExchange = connection.exchanges[binding.exchangeName];
			const consumers = findHandlers(connection, boundExchange, routingKey);
			return Object.assign(result, consumers || {});
		}
		return false;
	}, {});
}

function generateBindingRegex(pattern) {
	pattern = (pattern || "#").replace(".", "\\.").replace("#", "(\\w|\\.)+").replace("*", "\\w+");
	return new RegExp(`^${pattern}$`);
}

class Channel {
	constructor(connection) {
		var _this = this;

		this.connection = connection;

		this.ack = sinon.stub();
		this.nack = sinon.stub();
		this.reject = sinon.stub();
		this.prefetch = sinon.stub();
		this.on = sinon.stub();
		this.once = sinon.stub();

		this.trackedMessages = [];

		this.assertQueue = sinon.stub().callsFake((() => {
			var _ref3 = _asyncToGenerator(function* (queue, opt) {
				setIfUndefined(_this.connection.queues, queue, { messages: [], consumers: {}, options: opt });
				return { queue, messageCount: 0, consumerCount: 0 };
			});

			return function (_x4, _x5) {
				return _ref3.apply(this, arguments);
			};
		})());

		this.assertExchange = sinon.stub().callsFake((() => {
			var _ref4 = _asyncToGenerator(function* (exchange, opt) {
				setIfUndefined(_this.connection.exchanges, exchange, { bindings: [], options: opt });
				return { exchange };
			});

			return function (_x6, _x7) {
				return _ref4.apply(this, arguments);
			};
		})());

		this.bindExchange = sinon.stub().callsFake((() => {
			var _ref5 = _asyncToGenerator(function* (destination, source, pattern, args) {
				if (!_this.connection.exchanges[source]) {
					throw new Error(`Bind to non-existing exchange: ${source}`);
				}
				const regex = generateBindingRegex(pattern);
				_this.connection.exchanges[source].bindings.push({ regex, exchangeName: destination });
				return {};
			});

			return function (_x8, _x9, _x10, _x11) {
				return _ref5.apply(this, arguments);
			};
		})());

		this.bindQueue = sinon.stub().callsFake((() => {
			var _ref6 = _asyncToGenerator(function* (queue, exchange, pattern, args) {
				if (!_this.connection.exchanges[exchange]) {
					throw new Error(`Bind to non-existing exchange: ${exchange}`);
				}
				const regex = generateBindingRegex(pattern);
				_this.connection.exchanges[exchange].bindings.push({ regex, queueName: queue });
				return {};
			});

			return function (_x12, _x13, _x14, _x15) {
				return _ref6.apply(this, arguments);
			};
		})());

		this.consume = sinon.stub().callsFake((() => {
			var _ref7 = _asyncToGenerator(function* (queueName, handler) {
				const queue = _this.connection.queues[queueName];
				if (!queue) {
					throw new Error(`Consuming from non-existing queue: ${queueName}`);
				}
				const consumerTag = shortid.generate();
				queue.consumers[consumerTag] = handler;
				return { consumerTag };
			});

			return function (_x16, _x17) {
				return _ref7.apply(this, arguments);
			};
		})());

		this.publish = sinon.stub().callsFake((() => {
			var _ref8 = _asyncToGenerator(function* (exchangeName, routingKey, content, properties) {
				const exchange = _this.connection.exchanges[exchangeName];
				if (!exchange) {
					throw new Error(`Publish to non-existing exchange: ${exchangeName}`);
				}
				const consumers = findHandlers(_this.connection, exchange, routingKey);
				const message = { fields: { routingKey, exchange: exchangeName }, content, properties };
				_this.trackedMessages.push(message);
				return routeMessages(consumers, message);
			});

			return function (_x18, _x19, _x20, _x21) {
				return _ref8.apply(this, arguments);
			};
		})());

		this.sendToQueue = sinon.stub().callsFake((() => {
			var _ref9 = _asyncToGenerator(function* (queueName, content, properties) {
				const queue = _this.connection.queues[queueName];
				if (!queue) {
					return true;
				}
				const message = { fields: { routingKey: queueName }, content, properties };
				_this.trackedMessages.push(message);
				return routeMessages(queue.consumers, message);
			});

			return function (_x22, _x23, _x24) {
				return _ref9.apply(this, arguments);
			};
		})());
	}

	// amqplib sends a null message when it receives a close event from Rabbit
	closeConsumer(queueName) {
		var _this2 = this;

		return _asyncToGenerator(function* () {
			const queue = _this2.connection.queues[queueName];
			if (!queue) {
				return true;
			}
			return routeMessages(queue.consumers, null);
		})();
	}
}

module.exports = Channel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,